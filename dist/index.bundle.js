(()=>{"use strict";const e=e=>{const t={highest:e.forecast.forecastday[0].day.maxtemp_c,lowest:e.forecast.forecastday[0].day.mintemp_c,threeDayForecast:e.forecast.forecastday,getThreeDayMaxAndMinTemp(){const e=[],t=[],o=[],n=[],r=[];return this.threeDayForecast.forEach((c=>{e.push(c.day.maxtemp_c),t.push(c.day.mintemp_c),o.push(c.day.condition.icon),n.push(c.day.condition.text),r.push(c.date)})),{maxTempArray:e,minTempArray:t,conditionIconsArray:o,conditionTextArray:n,dateArray:r}}};return t};(async()=>{try{const e=await fetch("http://api.weatherapi.com/v1/current.json?key=1d38f27405c74273950235259231107&q=paris",{mode:"cors"}),t=await e.json(),o=(e=>({country:e.location.country,name:e.location.name,region:e.location.region,condition:e.current.condition.text,temperatureF:e.current.temp_F,temperatureC:e.current.temp_c,humidity:e.current.humidity}))(t);(e=>{document.querySelector(".location").textContent=`${e.name}, ${e.country}`,document.querySelector(".currentTemp").textContent=`${e.temperatureC} °C`,document.querySelector(".condition").textContent=`${e.condition}`})(o),console.log(t),e.ok||console.log(`Error: ${e.status} ${e.statusText}`)}catch(e){console.log(e)}})(),async function(){try{const t=await fetch("http://api.weatherapi.com/v1/forecast.json?key=1d38f27405c74273950235259231107&q=paris&days=3",{mode:"cors"}),o=await t.json();(e=>{document.querySelector(".high").textContent=`H: ${e.highest} °C`,document.querySelector(".low").textContent=`L: ${e.lowest} °C`,document.querySelectorAll(".day").forEach(((t,o)=>{const n=t,r=e.getThreeDayMaxAndMinTemp().dateArray[o];n.textContent=new Date(r).toLocaleString("en-EN",{weekday:"long"})})),document.querySelectorAll(".conditionIcon").forEach(((t,o)=>{t.src=e.getThreeDayMaxAndMinTemp().conditionIconsArray[o]})),document.querySelectorAll(".conditionText").forEach(((t,o)=>{t.textContent=e.getThreeDayMaxAndMinTemp().conditionTextArray[o]})),document.querySelectorAll(".forecastTemp").forEach(((t,o)=>{t.textContent=`${e.getThreeDayMaxAndMinTemp().maxTempArray[o]}°C / ${e.getThreeDayMaxAndMinTemp().minTempArray[o]} °C`}))})(e(o)),e(o)}catch(e){console.log(e)}}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,