(()=>{"use strict";const e=document.querySelector(".locationSubmit"),t=document.querySelector(".toF"),a=e=>{const t={highestC:e.forecast.forecastday[0].day.maxtemp_c,lowestC:e.forecast.forecastday[0].day.mintemp_c,highestF:e.forecast.forecastday[0].day.maxtemp_f,lowestF:e.forecast.forecastday[0].day.mintemp_f,threeDayForecast:e.forecast.forecastday,getThreeDayMaxAndMinTemp(){const e=[],t=[],a=[],n=[],o=[],r=[],c=[];return this.threeDayForecast.forEach((s=>{e.push(s.day.maxtemp_c),t.push(s.day.mintemp_c),a.push(s.day.maxtemp_f),n.push(s.day.mintemp_f),o.push(s.day.condition.icon),r.push(s.day.condition.text),c.push(s.date)})),{maxTempArrayC:e,minTempArrayC:t,maxTempArrayF:a,minTempArrayF:n,conditionIconsArray:o,conditionTextArray:r,dateArray:c}}};return t},n=async function(e){const t=`http://api.weatherapi.com/v1/forecast.json?key=1d38f27405c74273950235259231107&q=${e}&days=3`;try{const e=await fetch(t,{mode:"cors"}),n=await e.json();(e=>{const t=document.querySelector(".currentWeather"),a=document.querySelector(".forecastDataContainer"),n=document.querySelector(".high"),o=document.querySelector(".low"),r=document.querySelectorAll(".day"),c=document.querySelectorAll(".conditionIcon"),s=document.querySelectorAll(".conditionText"),i=document.querySelectorAll(".forecastTemp");"celsius"===t.dataset.value?(n.textContent=`H: ${e.highestC} °C`,o.textContent=`L: ${e.lowestC} °C`):"fahrenheit"===t.dataset.value&&(n.textContent=`H: ${e.highestF} °F`,o.textContent=`L: ${e.lowestF} °F`),r.forEach(((t,a)=>{const n=t,o=e.getThreeDayMaxAndMinTemp().dateArray[a];n.textContent=new Date(o).toLocaleString("en-EN",{weekday:"long"})})),c.forEach(((t,a)=>{t.src=e.getThreeDayMaxAndMinTemp().conditionIconsArray[a]})),s.forEach(((t,a)=>{t.textContent=e.getThreeDayMaxAndMinTemp().conditionTextArray[a]})),i.forEach(((t,n)=>{const o=t;"celsius"===a.dataset.value?o.textContent=`${e.getThreeDayMaxAndMinTemp().maxTempArrayC[n]}°C / ${e.getThreeDayMaxAndMinTemp().minTempArrayC[n]} °C`:"fahrenheit"===a.dataset.value&&(o.textContent=`${e.getThreeDayMaxAndMinTemp().maxTempArrayF[n]}°F / ${e.getThreeDayMaxAndMinTemp().minTempArrayF[n]} °F`)}))})(a(n)),a(n),console.log(a(n))}catch(e){console.log(e)}},o=async e=>{const t=`http://api.weatherapi.com/v1/current.json?key=1d38f27405c74273950235259231107&q=${e}`;try{const e=await fetch(t,{mode:"cors"});(e=>{const t=document.querySelector(".location"),a=document.querySelector(".currentTemp"),n=document.querySelector(".condition"),o=document.querySelector(".currentWeather");t.textContent=`${e.name}, ${e.region}, ${e.country}`,n.textContent=`${e.condition}`,"celsius"===o.dataset.value?a.textContent=`${e.temperatureC} °C`:"fahrenheit"===o.dataset.value&&(a.textContent=`${e.temperatureF} °F`)})({country:(a=await e.json()).location.country,name:a.location.name,region:a.location.region,condition:a.current.condition.text,temperatureF:a.current.temp_f,temperatureC:a.current.temp_c,humidity:a.current.humidity}),e.ok||console.log(`Error: ${e.status} ${e.statusText}`)}catch(e){console.log(e)}var a};n("Paris"),o("Paris"),e.addEventListener("click",(e=>{const t=document.querySelector("#inputLocation"),a=t.value;o(a),n(a),t.value="",e.preventDefault()})),t.addEventListener("click",(e=>{const t=document.querySelector(".location").textContent,a=document.querySelector(".currentWeather"),r=document.querySelector(".forecastDataContainer"),c=a.dataset.value,s=r.dataset.value,i=e;"celsius"===c||"celsius"===s?(a.dataset.value="fahrenheit",r.dataset.value="fahrenheit",o(t),n(t),i.target.textContent="Display °C"):"fahrenheit"!==c&&"fahrenheit"!==s||(a.dataset.value="celsius",r.dataset.value="celsius",o(t),n(t),i.target.textContent="Display °F")}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,