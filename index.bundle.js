(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>c});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,"* {\n    margin: none;\n    padding: none;\n}\n\nbody {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    height: 98vh;\n    width: 90vw;\n    gap: 10%;\n    font-size: 1.4rem;\n    background-repeat: no-repeat;\n    background-position: center;\n    background-size: cover;\n}\n \n.parentContainer {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap:45px;\n    background-color: #171717;\n    opacity: 0.8;\n    color: #f5f5f5;\n    border-radius: 12px;\n    height: 90vh;\n    width: 65vw;\n}\n\n.currentWeather {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 15vh;\n    gap: 10px;\n    margin: 25px;\n}\n\n.currentTemp {\n    font-size: 2.5rem;\n}\n\n.highLow {\n    display: flex;\n    flex-direction: row;\n    gap: 5px\n}\n\n.forecastDataContainer{\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    gap: 100px; \n    width: 80%;\n    height: 30%;\n}\n\n.forecast {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 15px;\n    width: 120px;\n    margin: 25px;\n}\n\n.day {\n    display: flex;\n    justify-content: center;\n}\n\n.conditionIcon {\n    display: flex;\n    justify-content: center;\n}\n\n.conditionText {\n    display: flex;\n    justify-content: center;\n    width: 300px;\n    margin: 15px;\n}\n\n.forecastTemp {\n    display: flex;\n    justify-content: center;\n    width: 180px;\n}\n\nform {\n    height: 10vh;\n    gap: 15px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\ninput {\n    padding: 12px;\n    border-radius: 12px;\n    font-size: 1.2rem;\n}\n\nbutton {\n    border: 1px solid whitesmoke;\n    background: none;\n    color: #fdfeff;\n    font-size: 1.2rem;\n    border-radius: 12px;\n    padding:10px;\n    cursor: pointer;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,sBAAsB;IACtB,YAAY;IACZ,WAAW;IACX,QAAQ;IACR,iBAAiB;IACjB,4BAA4B;IAC5B,2BAA2B;IAC3B,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,QAAQ;IACR,yBAAyB;IACzB,YAAY;IACZ,cAAc;IACd,mBAAmB;IACnB,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,YAAY;IACZ,SAAS;IACT,YAAY;AAChB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB;AACJ;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,UAAU;IACV,UAAU;IACV,WAAW;AACf;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,SAAS;IACT,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,SAAS;IACT,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,iBAAiB;AACrB;;AAEA;IACI,4BAA4B;IAC5B,gBAAgB;IAChB,cAAc;IACd,iBAAiB;IACjB,mBAAmB;IACnB,YAAY;IACZ,eAAe;AACnB",sourcesContent:["* {\n    margin: none;\n    padding: none;\n}\n\nbody {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    height: 98vh;\n    width: 90vw;\n    gap: 10%;\n    font-size: 1.4rem;\n    background-repeat: no-repeat;\n    background-position: center;\n    background-size: cover;\n}\n \n.parentContainer {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap:45px;\n    background-color: #171717;\n    opacity: 0.8;\n    color: #f5f5f5;\n    border-radius: 12px;\n    height: 90vh;\n    width: 65vw;\n}\n\n.currentWeather {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 15vh;\n    gap: 10px;\n    margin: 25px;\n}\n\n.currentTemp {\n    font-size: 2.5rem;\n}\n\n.highLow {\n    display: flex;\n    flex-direction: row;\n    gap: 5px\n}\n\n.forecastDataContainer{\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    gap: 100px; \n    width: 80%;\n    height: 30%;\n}\n\n.forecast {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 15px;\n    width: 120px;\n    margin: 25px;\n}\n\n.day {\n    display: flex;\n    justify-content: center;\n}\n\n.conditionIcon {\n    display: flex;\n    justify-content: center;\n}\n\n.conditionText {\n    display: flex;\n    justify-content: center;\n    width: 300px;\n    margin: 15px;\n}\n\n.forecastTemp {\n    display: flex;\n    justify-content: center;\n    width: 180px;\n}\n\nform {\n    height: 10vh;\n    gap: 15px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\ninput {\n    padding: 12px;\n    border-radius: 12px;\n    font-size: 1.2rem;\n}\n\nbutton {\n    border: 1px solid whitesmoke;\n    background: none;\n    color: #fdfeff;\n    font-size: 1.2rem;\n    border-radius: 12px;\n    padding:10px;\n    cursor: pointer;\n}"],sourceRoot:""}]);const c=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var A=0;A<n.length;A++){var u=[].concat(n[A]);r&&i[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),t&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=t):u[2]=t),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),e.push(u))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],c=0;c<n.length;c++){var s=n[c],A=r.base?s[0]+r.base:s[0],u=a[A]||0,d="".concat(A," ").concat(u);a[A]=u+1;var l=t(d),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==l)e[l].references++,e[l].updater(p);else{var f=o(p,r);r.byIndex=c,e.splice(c,0,{identifier:d,updater:f,references:1})}i.push(d)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var c=t(a[i]);e[c].references--}for(var s=r(n,o),A=0;A<a.length;A++){var u=t(a[A]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}a=s}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),a=t(569),i=t.n(a),c=t(565),s=t.n(c),A=t(216),u=t.n(A),d=t(589),l=t.n(d),p=t(426),f={};f.styleTagTransform=l(),f.setAttributes=s(),f.insert=i().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=u(),e()(p.Z,f),p.Z&&p.Z.locals&&p.Z.locals;const m=t.p+"b4c73abbbfa6eeb7f744.jpg",y=t.p+"a08e64ef5adb6a6c707d.jpg",h=t.p+"dccd33b992bf7f24ab59.jpg",C=t.p+"61912ddea32148ff7ad1.jpg",g=t.p+"0e454ccbc1921e133b5e.jpg",x=document.querySelector(".locationSubmit"),B=document.querySelector(".toF"),I=n=>{const e={highestC:n.forecast.forecastday[0].day.maxtemp_c,lowestC:n.forecast.forecastday[0].day.mintemp_c,highestF:n.forecast.forecastday[0].day.maxtemp_f,lowestF:n.forecast.forecastday[0].day.mintemp_f,threeDayForecast:n.forecast.forecastday,getThreeDayMaxAndMinTemp(){const n=[],e=[],t=[],r=[],o=[],a=[],i=[];return this.threeDayForecast.forEach((c=>{n.push(c.day.maxtemp_c),e.push(c.day.mintemp_c),t.push(c.day.maxtemp_f),r.push(c.day.mintemp_f),o.push(c.day.condition.icon),a.push(c.day.condition.text),i.push(c.date)})),{maxTempArrayC:n,minTempArrayC:e,maxTempArrayF:t,minTempArrayF:r,conditionIconsArray:o,conditionTextArray:a,dateArray:i}}};return e},v=async function(n){const e=`http://api.weatherapi.com/v1/forecast.json?key=1d38f27405c74273950235259231107&q=${n}&days=3`;try{const n=await fetch(e,{mode:"cors"}),t=await n.json();(n=>{const e=document.querySelector(".currentWeather"),t=document.querySelector(".forecastDataContainer"),r=document.querySelector(".high"),o=document.querySelector(".low"),a=document.querySelectorAll(".day"),i=document.querySelectorAll(".conditionIcon"),c=document.querySelectorAll(".conditionText"),s=document.querySelectorAll(".forecastTemp");"celsius"===e.dataset.value?(r.textContent=` ${n.highestC} °C`,o.textContent=` ${n.lowestC} °C `):"fahrenheit"===e.dataset.value&&(r.textContent=` ${n.highestF} °F`,o.textContent=` ${n.lowestF} °F`),a.forEach(((e,t)=>{const r=e,o=n.getThreeDayMaxAndMinTemp().dateArray[t];r.textContent=new Date(o).toLocaleString("en-EN",{weekday:"long"})})),i.forEach(((e,t)=>{e.src=n.getThreeDayMaxAndMinTemp().conditionIconsArray[t]})),c.forEach(((e,t)=>{e.textContent=n.getThreeDayMaxAndMinTemp().conditionTextArray[t]})),s.forEach(((e,r)=>{const o=e;"celsius"===t.dataset.value?o.textContent=`${n.getThreeDayMaxAndMinTemp().maxTempArrayC[r]}°C / ${n.getThreeDayMaxAndMinTemp().minTempArrayC[r]} °C`:"fahrenheit"===t.dataset.value&&(o.textContent=`${n.getThreeDayMaxAndMinTemp().maxTempArrayF[r]}°F / ${n.getThreeDayMaxAndMinTemp().minTempArrayF[r]} °F`)}))})(I(t)),I(t)}catch(n){throw new Error(n)}},b=async n=>{const e=`http://api.weatherapi.com/v1/current.json?key=1d38f27405c74273950235259231107&q=${n}`;try{const n=await fetch(e,{mode:"cors"});if((n=>{const e=document.querySelector(".location"),t=document.querySelector(".currentTemp"),r=document.querySelector(".condition"),o=document.querySelector(".currentWeather");e.textContent=`${n.name}, ${n.region}, ${n.country}`,r.textContent=`${n.condition}`,"celsius"===o.dataset.value?t.textContent=`${n.temperatureC} °C`:"fahrenheit"===o.dataset.value&&(t.textContent=`${n.temperatureF} °F`);const a=r.textContent.toLowerCase();a.includes("rain")||a.includes("thunder")?document.body.style.backgroundImage=`url(${m})`:a.includes("sunny")||a.includes("clear")?document.body.style.backgroundImage=`url(${y})`:a.includes("cloudy")||a.includes("overcast")?document.body.style.backgroundImage=`url(${C})`:a.includes("snow")||a.includes("sleet")||a.includes("freezing")||a.includes("ice")?document.body.style.backgroundImage=`url(${h})`:a.includes("mist")&&(document.body.style.backgroundImage=`url(${g})`)})({country:(t=await n.json()).location.country,name:t.location.name,region:t.location.region,condition:t.current.condition.text,temperatureF:t.current.temp_f,temperatureC:t.current.temp_c,humidity:t.current.humidity}),!n.ok)throw new Error(`Error: ${n.status} ${n.statusText}`)}catch(n){throw new Error(n)}var t};v("Paris"),b("Paris"),x.addEventListener("click",(n=>{const e=document.querySelector("#inputLocation"),t=e.value;if(b(t),v(t),""===t)throw new Error("Location cannot be blank!");e.value="",n.preventDefault()})),B.addEventListener("click",(n=>{const e=document.querySelector(".location").textContent,t=document.querySelector(".currentWeather"),r=document.querySelector(".forecastDataContainer"),o=t.dataset.value,a=r.dataset.value,i=n;"celsius"===o||"celsius"===a?(t.dataset.value="fahrenheit",r.dataset.value="fahrenheit",b(e),v(e),i.target.textContent="Display °C"):"fahrenheit"!==o&&"fahrenheit"!==a||(t.dataset.value="celsius",r.dataset.value="celsius",b(e),v(e),i.target.textContent="Display °F")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,