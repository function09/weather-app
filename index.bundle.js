(()=>{"use strict";const e=document.querySelector(".locationSubmit"),t=e=>{const t={highest:e.forecast.forecastday[0].day.maxtemp_c,lowest:e.forecast.forecastday[0].day.mintemp_c,threeDayForecast:e.forecast.forecastday,getThreeDayMaxAndMinTemp(){const e=[],t=[],o=[],n=[],r=[];return this.threeDayForecast.forEach((c=>{e.push(c.day.maxtemp_c),t.push(c.day.mintemp_c),o.push(c.day.condition.icon),n.push(c.day.condition.text),r.push(c.date)})),{maxTempArray:e,minTempArray:t,conditionIconsArray:o,conditionTextArray:n,dateArray:r}}};return t},o=async function(e){const o=`http://api.weatherapi.com/v1/forecast.json?key=1d38f27405c74273950235259231107&q=${e}&days=3`;try{const e=await fetch(o,{mode:"cors"}),n=await e.json();(e=>{document.querySelector(".high").textContent=`H: ${e.highest} °C`,document.querySelector(".low").textContent=`L: ${e.lowest} °C`,document.querySelectorAll(".day").forEach(((t,o)=>{const n=t,r=e.getThreeDayMaxAndMinTemp().dateArray[o];n.textContent=new Date(r).toLocaleString("en-EN",{weekday:"long"})})),document.querySelectorAll(".conditionIcon").forEach(((t,o)=>{t.src=e.getThreeDayMaxAndMinTemp().conditionIconsArray[o]})),document.querySelectorAll(".conditionText").forEach(((t,o)=>{t.textContent=e.getThreeDayMaxAndMinTemp().conditionTextArray[o]})),document.querySelectorAll(".forecastTemp").forEach(((t,o)=>{t.textContent=`${e.getThreeDayMaxAndMinTemp().maxTempArray[o]}°C / ${e.getThreeDayMaxAndMinTemp().minTempArray[o]} °C`}))})(t(n)),t(n)}catch(e){console.log(e)}},n=async e=>{const t=`http://api.weatherapi.com/v1/current.json?key=1d38f27405c74273950235259231107&q=${e}`;try{const e=await fetch(t,{mode:"cors"});(e=>{document.querySelector(".location").textContent=`${e.name}, ${e.region}, ${e.country}`,document.querySelector(".currentTemp").textContent=`${e.temperatureC} °C`,document.querySelector(".condition").textContent=`${e.condition}`})({country:(o=await e.json()).location.country,name:o.location.name,region:o.location.region,condition:o.current.condition.text,temperatureF:o.current.temp_F,temperatureC:o.current.temp_c,humidity:o.current.humidity}),e.ok||console.log(`Error: ${e.status} ${e.statusText}`)}catch(e){console.log(e)}var o};o("Paris"),n("Paris"),e.addEventListener("click",(e=>{const t=document.querySelector("#inputLocation").value;n(t),o(t),e.preventDefault()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,